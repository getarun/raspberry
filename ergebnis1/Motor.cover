       #/usr/bin/python
       # -*- coding: utf-8 -*-
       #
       # parse Gcode
       #
       """
       Motor Classes for Controller
>>>>>> """
       
>>>>>> try:
>>>>>>     import RPi.GPIO as GPIO
>>>>>> except ImportError:
>>>>>>     from FakeGPIO import FakeGPIO as GPIO
>>>>>> import logging
>>>>>> logging.basicConfig(level=logging.INFO, format="%(message)s")
       
>>>>>> class Motor(object):
           """
           Abstract Class for Motor
           usually you have to overwrite __move and unhold methods
           """
       
>>>>>>     def __init__(self, max_position, min_position):
    3:         self.max_position = max_position
    3:         self.min_position = min_position
               # define
    3:         self.position = 0
    3:         self.float_position = 0.0
       
>>>>>>     def move_float(self, direction, float_step):
               """
               this method is called from controller
               float_step is bewtween 0.0 < 1.0
               """
               #logging.debug("move_float called with %d, %f", direction, float_step)
26209:         assert type(direction) == int
26209:         assert (direction == -1) or (direction == 1)
26209:         assert 0.0 <= float_step <= 1.0
26209:         self.float_position += (float_step * direction)
26209:         distance = abs(self.position - self.float_position)
26209:         if distance >= 1.0:
                   #logging.debug("initializing full step, distance %s > 1.0", distance) 
12103:             self._move(direction)
               #else:
                   #logging.debug("distance %s to small to initialize full step", distance)
26209:         distance = abs(self.float_position - self.position)
               #logging.debug("int_position = %d : float_position = %f : distance = %f", self.position, self.float_position, distance)
               # final distance between exact float and real int must be lesser than 1.0
26209:         assert distance < 1.0
       
>>>>>>     def _move(self, direction):
               """
               move number of full integer steps
               """
               #logging.debug("Moving Motor One step in direction %s", direction)
               #logging.debug("Motor accuracy +/- %s", self.position - self.float_position)
>>>>>>         self.position += direction
       
>>>>>>     def unhold(self):
               """release power"""
               #logging.info("Unholding Motor Coils")
>>>>>>         pass
       
>>>>>>     def get_position(self):
               """return real position as int"""
20769:         return(self.position)
       
>>>>>>     def get_float_position(self):
               """return exact position as float"""
>>>>>>         return(self.float_position)
       
       
>>>>>> class LaserMotor(Motor):
           """Laser Motor, reactive if axis moves negative"""
       
>>>>>>     def __init__(self, laser_pin, max_position, min_position):
    1:         Motor.__init__(self, max_position, min_position)
    1:         self.laser_pin = laser_pin
    1:         GPIO.setup(self.laser_pin, GPIO.OUT)
    1:         GPIO.setup(self.laser_pin, 0)
        
>>>>>>     def _move(self, direction):
               """move number of full integer steps"""
 3164:         self.position += direction
               # turn on laser if position < 0
 3164:         if self.position < 0.0:
  486:             GPIO.output(self.laser_pin, 1)
               else:
 2678:             GPIO.output(self.laser_pin, 0)
       
>>>>>>     def unhold(self):
               """power off"""
    1:         logging.info("Power off laser")
       
       
>>>>>> class BipolarStepperMotor(Motor):
           """
           Class to represent a bipolar stepper motor
           it could only with on one dimension, forward or backwards
       
           cloil -> set(a1, a2, b1, b2) of GPIO Pins where these connectors are patched
           delay -> int(milliseconds to wait between moves
           max_position -> int(maximum position) is set to safe value of 1
           min_position -> int(minimum position) is set to 0
               b1
           a1      a1
               b2
       
           following seuqnece is possible (a1, a2, b1, b2)
       
           low torque mode
           1 0 0 0 a1
           0 0 1 0 b1
           0 1 0 0 a2
           0 0 0 1 b2
           
           high torque mode - full step mode
           1 0 1 0 between a1/b1
           0 1 1 0 between b1/a2
           0 1 0 1 between a2/b2
           1 0 0 1 between b2/a1
       
           mixed torque mode - half step mode
           1 0 0 0 a1
           1 0 1 0 between a1/b1
           0 0 1 0 b1
           0 1 1 0 between b1/a2
           0 1 0 0 a2
           0 1 0 1 between a2/b2
           0 0 0 1 b2
           1 0 0 1 between b2/a1
       
           """
           # low torque mode - also low power as only one coil is powered
>>>>>>     SEQUENCE_LOW = ((1,0,0,0), (0,0,1,0), (0,1,0,0), (0,0,0,1))
           # high torque - full step mode
>>>>>>     SEQUENCE_HIGH = ((1,0,1,0), (0,1,1,0), (0,1,0,1), (1,0,0,1))
           # mixed torque - half step mode
>>>>>>     SEQUENCE_MIXED = ((1,0,0,0), (1,0,1,0), (0,0,1,0), (0,1,1,0), (0,1,0,0), (0,1,0,1), (0,0,0,1), (1,0,0,1))
           # ok
>>>>>>     SEQUENCE = SEQUENCE_MIXED
       
>>>>>>     def __init__(self, coils, max_position, min_position):
               """init"""
    2:         Motor.__init__(self, max_position, min_position)
    2:         self.coils = coils
               # define coil pins as output
   10:         for pin in self.coils:
    8:             GPIO.setup(pin, GPIO.OUT)
    8:             GPIO.setup(pin, 0)
    2:         self.num_sequence = len(self.SEQUENCE)
       
>>>>>>     def _move(self, direction):
               """
               move to given direction number of steps, its relative
               delay_faktor could be set, if this Motor is connected to a controller
               which moves also another Motor
               """
 8939:         phase = self.SEQUENCE[self.position % self.num_sequence]
 8939:         counter = 0
44695:         for pin in self.coils:
35756:             GPIO.output(pin, phase[counter])
35756:             counter += 1
 8939:         self.position += direction
       
>>>>>>     def unhold(self):
               """
               sets any pin of motor to low, so no power is needed
               """
   10:         for pin in self.coils:
    8:             GPIO.output(pin, False)
