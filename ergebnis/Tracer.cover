       #/usr/bin/python
       # -*- coding: utf-8 -*-
       #
       # parse Gcode
       #
       
>>>>>> import logging
>>>>>> logging.basicConfig(level=logging.INFO, format="%(message)s")
>>>>>> try:
>>>>>>     import RPi.GPIO as GPIO
>>>>>> except ImportError:
>>>>>>     logging.error("Semms not be a RaspberryPi")
>>>>>>     from  FakeGPIO import FakeGPIO as GPIO
>>>>>> import sys
>>>>>> import re
>>>>>> import inspect
>>>>>> import pygame
>>>>>> import time
>>>>>> import trace
       # own modules
>>>>>> from Motor import Motor as Motor
>>>>>> from Motor import BipolarStepperMotor as BipolarStepperMotor
>>>>>> from Motor import LaserMotor as LaserMotor
>>>>>> from Spindle import Spindle as Spindle
>>>>>> from Spindle import Laser as Laser
>>>>>> from Controller import Controller as Controller
>>>>>> from GcodeParser import Parser as Parser
       
       # wait for keypress, or wait amount of time
>>>>>> AUTOMATIC = None
>>>>>> AUTOMATIC = 0.01
       # pygame Zoom faktor
>>>>>> ZOOM = 4
       
       
>>>>>> def safe_position():
   22:     for pin in (4, 2, 27, 22, 23, 14, 24, 25, 7, 8):
   20:         GPIO.setup(pin, GPIO.OUT)
   20:         GPIO.output(pin, 0)
       
>>>>>> def main(): 
           # bring GPIO to a clean state
    1:     GPIO.cleanup()
    1:     GPIO.setmode(GPIO.BCM)
    1:     try:
    1:         logging.info("Initializing all GPIO Pins, and set state LOW")
    1:         safe_position()
    1:         logging.info("Please move positions to origin")
    1:         key = raw_input("Press any KEY when done")
    1:         logging.info("Initialize GPIO Modes")
    1:         GPIO.setup(23, GPIO.OUT)
    1:         GPIO.output(23, 1)
    1:         GPIO.setup(14, GPIO.OUT)
    1:         GPIO.output(14, 0)
    1:         key = raw_input("Press and KEY to start parsing")
    1:         pygame.init()
    1:         surface = pygame.display.set_mode((530, 530))
    1:         surface.fill((0, 0, 0))
    1:         pygame.display.flip()
    1:         parser = Parser(surface=surface)
    1:         parser.read()
    1:     except Exception, exc:
    1:         logging.exception(exc)
    1:         safe_position()
    1:         GPIO.cleanup()
    1:     pygame.quit()
       
>>>>>> if __name__ == "__main__":
>>>>>>     tracer = trace.Trace( 
>>>>>>         ignoredirs = [sys.prefix, sys.exec_prefix], 
>>>>>>         trace = 0) 
>>>>>>     tracer.run("main()")
>>>>>>     r = tracer.results() 
>>>>>>     r.write_results(show_missing=True, coverdir="ergebnis")
>>>>>>     main()
